---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html class="scroll-smooth" lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body id="home" class="bg-[#fff] relative pt-14">
		<Header />
		<slot />
		<Footer />
	</body>
</html>

<script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
  const desktopMenu = document.getElementById("desktop_Menu");
  const mobileMenu = document.getElementById("mobile_Menu");
  const dropmenuBtn = document.getElementById("dropmenuBtn");

  dropmenuBtn.addEventListener("click", () => {
    // desktopMenu
    if (window.innerWidth >= 768) {
      
      // Toggle desktop menu
      if (desktopMenu.classList.contains("hidden")) {
        desktopMenu.classList.remove("hidden");
        setTimeout(setTimeout(() => {
          desktopMenu.classList.add("opacity-100");
        }, 500));
      } else {
        setTimeout(setTimeout(() => {
          desktopMenu.classList.add("hidden");
        }, 500));
        desktopMenu.classList.remove("opacity-100");
      } //

    } 
    // mobileMenu
    else {

      // Toggle mobile menu
      if (mobileMenu.classList.contains("hidden")) {
        mobileMenu.classList.remove("hidden");
        setTimeout(setTimeout(() => {
          mobileMenu.classList.add("opacity-100");
        }, 500));
      } else {
        setTimeout(setTimeout(() => {
          mobileMenu.classList.add("hidden");
        }, 500));
        mobileMenu.classList.remove("opacity-100");
      } //

    }
  });

  // window rezise
  window.addEventListener("resize", () => {

    desktopMenu.classList.remove("opacity-100");
    desktopMenu.classList.add("hidden");

    mobileMenu.classList.remove("opacity-100");
    mobileMenu.classList.add("hidden");
  }); // 

});


</script>

<style is:global>
	@tailwind base;
@tailwind components;
@tailwind utilities;


@font-face {
    font-family: 'Syne';
    font-style: normal;
    font-weight: 400;
    src: url(./src/assets/fonts/Syne.ttf);
  }
@layer base {
      @font-face {
        font-family: 'Syne';
        font-style: normal;
        font-weight: 400;
        src: url(./src/assets/fonts/Syne.ttf) format('ttf');
    }
}
  
.font-Syne{
    font-family: 'Syne' ,system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif
}

.animate-morph{
    animation: morph 8s ease-in-out infinite;
}


@keyframes morph {
    0% {
        border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
    }
    50% {
        border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%;
    }
    100% {
        border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
    }
}
</style>
